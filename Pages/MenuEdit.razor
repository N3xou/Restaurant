@using Restaurant.Services
@using Restaurant.Models
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms


@page "/MenuEdit"
@inject IMenuService MenuService
@inject IWebHostEnvironment HostEnvironment

<h3>Menu</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @*<th>Id</th>*@
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products.OrderBy(p => p.Name))
            {
                <tr class>
                    @*<td>@product.Id</td>*@
                    <td>@product.Name</td>
                    <td>@product.Price €</td>
                    <td>@product.Description</td>
                    <td>
                        @product.ImgPath
                    @*<img src="/images/@product.ImgPath" alt="Product Image" width="200" height="200" />*@

                    </td>
                    <td>
                        <button class="btn btn-prim ary" @onclick="() => EditProduct(product)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
                
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="ToggleAddProductForm">Add Product</button>

@if (showEditForm)
{
    <div>
        <h3>Edit Product</h3>
        <div class="form-group">
            <label for="editName">Name</label>
            <input type="text" class="form-control" id="editName" @bind="@selectedProduct.Name" />
        </div>
        <div class="form-group">
            <label for="editPrice">Price</label>
            <input type="number" class="form-control" id="editPrice" @bind="@selectedProduct.Price" />
        </div>
        <div class="form-group">
            <label for="editDescription">Description</label>
            <input type="text" class="form-control" id="editDescription" @bind="@selectedProduct.Description" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
            <button class="btn btn-secondary" @onclick="ToggleEditForm">Cancel</button>
        </div>
    </div>
}
@if (showAddProductForm)
{
    <div class="mt-4">
        <h4>Add Product</h4>
        <div class="mb-3">
            <label for="productName" class="form-label">Name</label>
            <input type="text" class="form-control" id="productName" @bind="@newProduct.Name">
        </div>
        <div class="mb-3">
            <label for="productPrice" class="form-label">Price</label>
            <input type="number" step="0.01" class="form-control" id="productPrice" @bind="@newProduct.Price">
        </div>
        <div class="mb-3">
            <label for="productDescription" class="form-label">Description</label>
            <textarea class="form-control" id="productDescription" rows="3" @bind="@newProduct.Description"></textarea>
        </div>
        <div class="mb-3">
            <label for="productImgPath" class="form-label">Image Path</label>
            <input type="text" class="form-control" id="productImgPath" @bind="@newProduct.ImgPath" placeholder="Enter file name with extension ex. giraffe.jpg ">
        </div>
        <button class="btn btn-success" @onclick="AddProduct">Add</button>
		<button class="btn btn-secondary" @onclick="ToggleAddProductForm">Cancel</button><MenuEdit />
    </div>
}

@code {
    private List<ProductModel> products;
    private ProductModel newProduct = new ProductModel();
    private ProductModel selectedProduct = new ProductModel();

    private bool showAddProductForm = false;
    private bool showEditForm = false;

    protected override async Task OnInitializedAsync()
    {
        products = await MenuService.GetAll();
    }

    private async Task AddProduct()
    {
        var result = await MenuService.AddProduct(newProduct);
        if (result == null)
        {
            // Handle error
            return;
        }

        products = result;
        newProduct = new ProductModel(); // Reset the new product form
    }

    private async Task EditProduct(ProductModel product)
    {
        selectedProduct = product;
        ToggleEditForm();
    }

    private async Task SaveEdit()
    {
        var result = await MenuService.Edit(selectedProduct.Id, selectedProduct);
        if (result == null)
        {
            // Handle error
            return;
        }
        products = result.OrderBy(p => p.Name).ToList();
        ToggleEditForm();
    }

    private async Task DeleteProduct(int id)
    {
        var result = await MenuService.DeleteProduct(id);
        if (result == null)
        {
            // Handle error
            return;
        }

        products = result;
    }

    private void ClearSelectedProduct()
    {
        selectedProduct = null;
    }

    private void ToggleAddProductForm()
    {
        showAddProductForm = !showAddProductForm;
    }
    

    private void ToggleEditForm()
    {
        showEditForm = !showEditForm;
    }
    

}

