@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject IMenuService _menuService
@inject ICartService _cartService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager

@page "/menu"

<div class="menu-container">
    @if (MenuRows != null)
    {
        @foreach (var row in MenuRows)
        {
            <div class="row">
                @foreach (var product in row)
                {
                    <div class="col">
                        <h4>@product.Name</h4>
                        <div class="image-description">
                            <img src="/images/@product.ImgPath" alt="Product Image" width="200" height="200" />
                            <div class="description">@product.Description</div>
                        </div>
                        <p>Price: @product.Price</p>
                        <button @onclick="() => AddToCart(product.Id, product)">Add to Cart</button>
                    </div>  
                }
            </div>
        }
    }
</div>
<button class="cart-toggle-button" @onclick="ToggleCart">Toggle Cart</button>
@if (CartProducts.OrderItems != null)
{
    <div class="cart-overlay @(IsCartVisible ? "visible" : "")">
        <div class="cart-header">
            <h1>Cart</h1>
            <button class="close-button " @onclick="ToggleCart">&#10005</button>
        </div>
        <div class="cart-items">
            @foreach (var product in CartProducts.OrderItems)
            {
                <div class="cart-item">
                    <h4>@product.Name</h4>
                    <img src="/images/@product.ImgPath" alt="Product Image" width="200" height="200" />
                    <p style="font-size: 22px;">Price: @product.Price</p>
                    <button @onclick="() => Remove(product)"> Remove</button>

                </div>
            }
        </div>
        <div class="cart-footer">
            <div class="total-price">
                <p>Total Price: @CartProducts.TotalPrice</p>
            </div>
            <div class="order-button">
                <button @onclick="PlaceOrder">Order</button>
            </div>
        </div>
    </div>


}
@code {

    public List<ProductModel> Menu { get; set; }


    //public EventCallback<int> AddToCartClicked { get; set; }

    private List<List<ProductModel>> MenuRows { get; set; }
    public OrderModel CartProducts = new OrderModel();
    private bool IsCartVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Menu = await _menuService.GetAll();
        Menu = Menu.OrderBy(item => item.Name).ToList();
        ArrangeMenuIntoRows();
    }

    private void Remove(ProductModel product)
    {
        CartProducts.OrderItems.Remove(product);

    }

    private void ToggleCart()
    {
        IsCartVisible = !IsCartVisible;
    }
    private void ArrangeMenuIntoRows()
    {
        MenuRows = new List<List<ProductModel>>();
        List<ProductModel> currentRow = new List<ProductModel>();

        foreach (var product in Menu)
        {
            currentRow.Add(product);

            if (currentRow.Count == 2)
            {
                MenuRows.Add(currentRow);

                currentRow = new List<ProductModel>();
            }
        }

        if (currentRow.Count > 0)
        {
            MenuRows.Add(currentRow);
        }
    }
    private void AddToCart(int productId,ProductModel product)
    {
        CartProducts.OrderItems.Add(product);
        //JSRuntime.InvokeVoidAsync("showPopup", "Product added to cart");

    }
    //private async Task AddToCart(int productId, ProductModel product)
    //{
    //    await AddToCartClicked.InvokeAsync(productId);
    //    CartProducts.OrderItems.Add(product);
    //    CartProducts.ProductIds += productId.ToString();

    //}
    private async void PlaceOrder()
    {
        if (CartProducts.OrderItems.Count > 0)
        {

                foreach (var product in CartProducts.OrderItems)
                {
                    CartProducts.ProductIds = CartProducts.ProductIds + " " + product.Id.ToString();
                }
                int idNumber = await _cartService.Order(CartProducts);
                await JSRuntime.InvokeVoidAsync("showPopup", "Successfully ordered, your order number is " + idNumber);
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
           
            
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("showPopup", "Cart is empty");
        }
    }

}
